"""
    Marktdatenstammregister API

    Das MaStR f√ºhrt die Stammdaten zu Strom- und Gaserzeugungsanlagen sowie Marktakteuren wie Anlagenbetreibern, Netzbetreibern und Energielieferanten.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: kontakt@bund.dev
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.marktstammdaten.exceptions import ApiAttributeError
from deutschland.marktstammdaten.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    OpenApiModel,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class Entry(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (
            bool,
            date,
            datetime,
            dict,
            float,
            int,
            list,
            str,
            none_type,
        )  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            "id": (float,),  # noqa: E501
            "anlagenbetreiber_id": (float,),  # noqa: E501
            "anlagenbetreiber_personen_art": (float,),  # noqa: E501
            "anlagenbetreiber_masked_name": (str,),  # noqa: E501
            "anlagenbetreiber_ma_st_r_nummer": (str,),  # noqa: E501
            "anlagenbetreiber_name": (str,),  # noqa: E501
            "betriebs_status_id": (int,),  # noqa: E501
            "betriebs_status_name": (str,),  # noqa: E501
            "breitengrad": (
                float,
                none_type,
            ),  # noqa: E501
            "bundesland_id": (int,),  # noqa: E501
            "bundesland": (str,),  # noqa: E501
            "datum_letzte_aktualisierung": (str,),  # noqa: E501
            "einheit_registrierungsdatum": (str,),  # noqa: E501
            "einheit_name": (str,),  # noqa: E501
            "endgueltige_stilllegung_datum": (
                str,
                none_type,
            ),  # noqa: E501
            "flurstueck": (
                str,
                none_type,
            ),  # noqa: E501
            "gemarkung": (str,),  # noqa: E501
            "gemeinde": (str,),  # noqa: E501
            "gemeindeschluessel": (str,),  # noqa: E501
            "geplantes_inbetriebsnahme_datum": (
                str,
                none_type,
            ),  # noqa: E501
            "hausnummer": (
                str,
                none_type,
            ),  # noqa: E501
            "inbetriebnahme_datum": (str,),  # noqa: E501
            "is_nb_pruefung_abgeschlossen": (float,),  # noqa: E501
            "laengengrad": (
                float,
                none_type,
            ),  # noqa: E501
            "land_id": (int,),  # noqa: E501
            "landkreis": (str,),  # noqa: E501
            "lokation_id": (int,),  # noqa: E501
            "lokation_mastr_nr": (str,),  # noqa: E501
            "ma_st_r_nummer": (str,),  # noqa: E501
            "netzbetreiber_id": (str,),  # noqa: E501
            "netzbetreiber_masked_namen": (str,),  # noqa: E501
            "netzbetreiber_ma_st_r_nummer": (str,),  # noqa: E501
            "netzbetreiber_namen": (str,),  # noqa: E501
            "netzbetreiber_personen_art": (str,),  # noqa: E501
            "ort": (str,),  # noqa: E501
            "plz": (str,),  # noqa: E501
            "strasse": (
                str,
                none_type,
            ),  # noqa: E501
            "system_status_id": (int,),  # noqa: E501
            "system_status_name": (str,),  # noqa: E501
            "typ": (int,),  # noqa: E501
            "aktenzeichen_genehmigung": (
                str,
                none_type,
            ),  # noqa: E501
            "anzahl_solar_module": (
                int,
                none_type,
            ),  # noqa: E501
            "batterietechnologie": (
                int,
                none_type,
            ),  # noqa: E501
            "bruttoleistung": (float,),  # noqa: E501
            "eeg_inbetriebnahme_datum": (
                str,
                none_type,
            ),  # noqa: E501
            "eeg_installierte_leistung": (
                float,
                none_type,
            ),  # noqa: E501
            "eeg_anlage_mastr_nummer": (
                str,
                none_type,
            ),  # noqa: E501
            "eeg_anlage_registrierungsdatum": (
                str,
                none_type,
            ),  # noqa: E501
            "eeg_anlagenschluessel": (
                str,
                none_type,
            ),  # noqa: E501
            "eeg_zuschlag": (
                str,
                none_type,
            ),  # noqa: E501
            "zuschlagsnummern": (str,),  # noqa: E501
            "energietraeger_id": (int,),  # noqa: E501
            "energietraeger_name": (str,),  # noqa: E501
            "gemeinsamer_wechselrichter": (
                int,
                none_type,
            ),  # noqa: E501
            "genehmigungbehoerde": (
                str,
                none_type,
            ),  # noqa: E501
            "genehmigung_datum": (
                str,
                none_type,
            ),  # noqa: E501
            "genehmigung_registrierungsdatum": (
                str,
                none_type,
            ),  # noqa: E501
            "genehmigungs_mastr_nummer": (
                str,
                none_type,
            ),  # noqa: E501
            "gruppierungsobjekte": (str,),  # noqa: E501
            "gruppierungsobjekte_ids": (str,),  # noqa: E501
            "hat_flexibilitaetspraemie": (
                bool,
                none_type,
            ),  # noqa: E501
            "hauptausrichtung_solar_module": (
                int,
                none_type,
            ),  # noqa: E501
            "hauptausrichtung_solar_module_bezeichnung": (
                str,
                none_type,
            ),  # noqa: E501
            "hauptbrennstoff_id": (int,),  # noqa: E501
            "hauptbrennstoff_namen": (str,),  # noqa: E501
            "hauptneigungswinkel_solarmodule": (int,),  # noqa: E501
            "hersteller_windenergieanlage": (
                int,
                none_type,
            ),  # noqa: E501
            "hersteller_windenergieanlage_bezeichnung": (
                str,
                none_type,
            ),  # noqa: E501
            "is_anonymisiert": (bool,),  # noqa: E501
            "is_buergerenergie": (
                bool,
                none_type,
            ),  # noqa: E501
            "is_einheit_notstromaggregat": (
                bool,
                none_type,
            ),  # noqa: E501
            "kraftwerk_name": (
                str,
                none_type,
            ),  # noqa: E501
            "kraftwerk_block_name": (
                str,
                none_type,
            ),  # noqa: E501
            "kwk_anlage_elektrische_leistung": (float,),  # noqa: E501
            "kwk_anlage_inbetriebnahmedatum": (str,),  # noqa: E501
            "kwk_anlage_mastr_nummer": (str,),  # noqa: E501
            "kwk_anlage_registrierungsdatum": (str,),  # noqa: E501
            "kwk_zuschlag": (
                str,
                none_type,
            ),  # noqa: E501
            "lage_einheit": (
                int,
                none_type,
            ),  # noqa: E501
            "lage_einheit_bezeichnung": (
                str,
                none_type,
            ),  # noqa: E501
            "leistungsbegrenzung": (
                int,
                none_type,
            ),  # noqa: E501
            "mieterstrom_angemeldet": (
                bool,
                none_type,
            ),  # noqa: E501
            "nabenhoehe_windenergieanlage": (
                float,
                none_type,
            ),  # noqa: E501
            "nettonennleistung": (float,),  # noqa: E501
            "pilotwindanlage": (
                bool,
                none_type,
            ),  # noqa: E501
            "nutzbare_speicherkapazitaet": (
                float,
                none_type,
            ),  # noqa: E501
            "nutzungsbereich_geb_sa": (
                int,
                none_type,
            ),  # noqa: E501
            "prototypanlage": (
                bool,
                none_type,
            ),  # noqa: E501
            "rotordurchmesser_windenergieanlage": (
                float,
                none_type,
            ),  # noqa: E501
            "standort_anonymisiert": (str,),  # noqa: E501
            "spannungsebenen_namen": (str,),  # noqa: E501
            "speicher_einheit_mastr_nummer": (
                str,
                none_type,
            ),  # noqa: E501
            "technologie_stromerzeugung_id": (float,),  # noqa: E501
            "technologie_stromerzeugung": (
                str,
                none_type,
            ),  # noqa: E501
            "thermische_nutzleistung": (float,),  # noqa: E501
            "typenbezeichnung": (
                str,
                none_type,
            ),  # noqa: E501
            "voll_teil_einspeisung": (float,),  # noqa: E501
            "voll_teil_einspeisung_bezeichnung": (str,),  # noqa: E501
            "wasserkraft_ertuechtigung": (bool,),  # noqa: E501
            "wind_cluster_ostsee_id": (
                int,
                none_type,
            ),  # noqa: E501
            "wind_cluster_nordsee_id": (
                int,
                none_type,
            ),  # noqa: E501
            "windpark_name": (
                str,
                none_type,
            ),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "id": "Id",  # noqa: E501
        "anlagenbetreiber_id": "AnlagenbetreiberId",  # noqa: E501
        "anlagenbetreiber_personen_art": "AnlagenbetreiberPersonenArt",  # noqa: E501
        "anlagenbetreiber_masked_name": "AnlagenbetreiberMaskedName",  # noqa: E501
        "anlagenbetreiber_ma_st_r_nummer": "AnlagenbetreiberMaStRNummer",  # noqa: E501
        "anlagenbetreiber_name": "AnlagenbetreiberName",  # noqa: E501
        "betriebs_status_id": "BetriebsStatusId",  # noqa: E501
        "betriebs_status_name": "BetriebsStatusName",  # noqa: E501
        "breitengrad": "Breitengrad",  # noqa: E501
        "bundesland_id": "BundeslandId",  # noqa: E501
        "bundesland": "Bundesland",  # noqa: E501
        "datum_letzte_aktualisierung": "DatumLetzteAktualisierung",  # noqa: E501
        "einheit_registrierungsdatum": "EinheitRegistrierungsdatum",  # noqa: E501
        "einheit_name": "EinheitName",  # noqa: E501
        "endgueltige_stilllegung_datum": "EndgueltigeStilllegungDatum",  # noqa: E501
        "flurstueck": "Flurstueck",  # noqa: E501
        "gemarkung": "Gemarkung",  # noqa: E501
        "gemeinde": "Gemeinde",  # noqa: E501
        "gemeindeschluessel": "Gemeindeschluessel",  # noqa: E501
        "geplantes_inbetriebsnahme_datum": "GeplantesInbetriebsnahmeDatum",  # noqa: E501
        "hausnummer": "Hausnummer",  # noqa: E501
        "inbetriebnahme_datum": "InbetriebnahmeDatum",  # noqa: E501
        "is_nb_pruefung_abgeschlossen": "IsNBPruefungAbgeschlossen",  # noqa: E501
        "laengengrad": "Laengengrad",  # noqa: E501
        "land_id": "LandId",  # noqa: E501
        "landkreis": "Landkreis",  # noqa: E501
        "lokation_id": "LokationId",  # noqa: E501
        "lokation_mastr_nr": "LokationMastrNr",  # noqa: E501
        "ma_st_r_nummer": "MaStRNummer",  # noqa: E501
        "netzbetreiber_id": "NetzbetreiberId",  # noqa: E501
        "netzbetreiber_masked_namen": "NetzbetreiberMaskedNamen",  # noqa: E501
        "netzbetreiber_ma_st_r_nummer": "NetzbetreiberMaStRNummer",  # noqa: E501
        "netzbetreiber_namen": "NetzbetreiberNamen",  # noqa: E501
        "netzbetreiber_personen_art": "NetzbetreiberPersonenArt",  # noqa: E501
        "ort": "Ort",  # noqa: E501
        "plz": "Plz",  # noqa: E501
        "strasse": "Strasse",  # noqa: E501
        "system_status_id": "SystemStatusId",  # noqa: E501
        "system_status_name": "SystemStatusName",  # noqa: E501
        "typ": "Typ",  # noqa: E501
        "aktenzeichen_genehmigung": "AktenzeichenGenehmigung",  # noqa: E501
        "anzahl_solar_module": "AnzahlSolarModule",  # noqa: E501
        "batterietechnologie": "Batterietechnologie",  # noqa: E501
        "bruttoleistung": "Bruttoleistung",  # noqa: E501
        "eeg_inbetriebnahme_datum": "EegInbetriebnahmeDatum",  # noqa: E501
        "eeg_installierte_leistung": "EegInstallierteLeistung",  # noqa: E501
        "eeg_anlage_mastr_nummer": "EegAnlageMastrNummer",  # noqa: E501
        "eeg_anlage_registrierungsdatum": "EegAnlageRegistrierungsdatum",  # noqa: E501
        "eeg_anlagenschluessel": "EegAnlagenschluessel",  # noqa: E501
        "eeg_zuschlag": "EegZuschlag",  # noqa: E501
        "zuschlagsnummern": "Zuschlagsnummern",  # noqa: E501
        "energietraeger_id": "EnergietraegerId",  # noqa: E501
        "energietraeger_name": "EnergietraegerName",  # noqa: E501
        "gemeinsamer_wechselrichter": "GemeinsamerWechselrichter",  # noqa: E501
        "genehmigungbehoerde": "Genehmigungbehoerde",  # noqa: E501
        "genehmigung_datum": "GenehmigungDatum",  # noqa: E501
        "genehmigung_registrierungsdatum": "GenehmigungRegistrierungsdatum",  # noqa: E501
        "genehmigungs_mastr_nummer": "GenehmigungsMastrNummer",  # noqa: E501
        "gruppierungsobjekte": "Gruppierungsobjekte",  # noqa: E501
        "gruppierungsobjekte_ids": "GruppierungsobjekteIds",  # noqa: E501
        "hat_flexibilitaetspraemie": "HatFlexibilitaetspraemie",  # noqa: E501
        "hauptausrichtung_solar_module": "HauptausrichtungSolarModule",  # noqa: E501
        "hauptausrichtung_solar_module_bezeichnung": "HauptausrichtungSolarModuleBezeichnung",  # noqa: E501
        "hauptbrennstoff_id": "HauptbrennstoffId",  # noqa: E501
        "hauptbrennstoff_namen": "HauptbrennstoffNamen",  # noqa: E501
        "hauptneigungswinkel_solarmodule": "HauptneigungswinkelSolarmodule",  # noqa: E501
        "hersteller_windenergieanlage": "HerstellerWindenergieanlage",  # noqa: E501
        "hersteller_windenergieanlage_bezeichnung": "HerstellerWindenergieanlageBezeichnung",  # noqa: E501
        "is_anonymisiert": "IsAnonymisiert",  # noqa: E501
        "is_buergerenergie": "IsBuergerenergie",  # noqa: E501
        "is_einheit_notstromaggregat": "IsEinheitNotstromaggregat",  # noqa: E501
        "kraftwerk_name": "KraftwerkName",  # noqa: E501
        "kraftwerk_block_name": "KraftwerkBlockName",  # noqa: E501
        "kwk_anlage_elektrische_leistung": "KwkAnlageElektrischeLeistung",  # noqa: E501
        "kwk_anlage_inbetriebnahmedatum": "KwkAnlageInbetriebnahmedatum",  # noqa: E501
        "kwk_anlage_mastr_nummer": "KwkAnlageMastrNummer",  # noqa: E501
        "kwk_anlage_registrierungsdatum": "KwkAnlageRegistrierungsdatum",  # noqa: E501
        "kwk_zuschlag": "KwkZuschlag",  # noqa: E501
        "lage_einheit": "LageEinheit",  # noqa: E501
        "lage_einheit_bezeichnung": "LageEinheitBezeichnung",  # noqa: E501
        "leistungsbegrenzung": "Leistungsbegrenzung",  # noqa: E501
        "mieterstrom_angemeldet": "MieterstromAngemeldet",  # noqa: E501
        "nabenhoehe_windenergieanlage": "NabenhoeheWindenergieanlage",  # noqa: E501
        "nettonennleistung": "Nettonennleistung",  # noqa: E501
        "pilotwindanlage": "Pilotwindanlage",  # noqa: E501
        "nutzbare_speicherkapazitaet": "NutzbareSpeicherkapazitaet",  # noqa: E501
        "nutzungsbereich_geb_sa": "NutzungsbereichGebSA",  # noqa: E501
        "prototypanlage": "Prototypanlage",  # noqa: E501
        "rotordurchmesser_windenergieanlage": "RotordurchmesserWindenergieanlage",  # noqa: E501
        "standort_anonymisiert": "StandortAnonymisiert",  # noqa: E501
        "spannungsebenen_namen": "SpannungsebenenNamen",  # noqa: E501
        "speicher_einheit_mastr_nummer": "SpeicherEinheitMastrNummer",  # noqa: E501
        "technologie_stromerzeugung_id": "TechnologieStromerzeugungId",  # noqa: E501
        "technologie_stromerzeugung": "TechnologieStromerzeugung",  # noqa: E501
        "thermische_nutzleistung": "ThermischeNutzleistung",  # noqa: E501
        "typenbezeichnung": "Typenbezeichnung",  # noqa: E501
        "voll_teil_einspeisung": "VollTeilEinspeisung",  # noqa: E501
        "voll_teil_einspeisung_bezeichnung": "VollTeilEinspeisungBezeichnung",  # noqa: E501
        "wasserkraft_ertuechtigung": "WasserkraftErtuechtigung",  # noqa: E501
        "wind_cluster_ostsee_id": "WindClusterOstseeId",  # noqa: E501
        "wind_cluster_nordsee_id": "WindClusterNordseeId",  # noqa: E501
        "windpark_name": "WindparkName",  # noqa: E501
    }

    read_only_vars = {}

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Entry - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (float): [optional]  # noqa: E501
            anlagenbetreiber_id (float): [optional]  # noqa: E501
            anlagenbetreiber_personen_art (float): [optional]  # noqa: E501
            anlagenbetreiber_masked_name (str): [optional]  # noqa: E501
            anlagenbetreiber_ma_st_r_nummer (str): [optional]  # noqa: E501
            anlagenbetreiber_name (str): [optional]  # noqa: E501
            betriebs_status_id (int): [optional]  # noqa: E501
            betriebs_status_name (str): [optional]  # noqa: E501
            breitengrad (float, none_type): [optional]  # noqa: E501
            bundesland_id (int): [optional]  # noqa: E501
            bundesland (str): [optional]  # noqa: E501
            datum_letzte_aktualisierung (str): [optional]  # noqa: E501
            einheit_registrierungsdatum (str): [optional]  # noqa: E501
            einheit_name (str): [optional]  # noqa: E501
            endgueltige_stilllegung_datum (str, none_type): [optional]  # noqa: E501
            flurstueck (str, none_type): [optional]  # noqa: E501
            gemarkung (str): [optional]  # noqa: E501
            gemeinde (str): [optional]  # noqa: E501
            gemeindeschluessel (str): [optional]  # noqa: E501
            geplantes_inbetriebsnahme_datum (str, none_type): [optional]  # noqa: E501
            hausnummer (str, none_type): [optional]  # noqa: E501
            inbetriebnahme_datum (str): [optional]  # noqa: E501
            is_nb_pruefung_abgeschlossen (float): [optional]  # noqa: E501
            laengengrad (float, none_type): [optional]  # noqa: E501
            land_id (int): [optional]  # noqa: E501
            landkreis (str): [optional]  # noqa: E501
            lokation_id (int): [optional]  # noqa: E501
            lokation_mastr_nr (str): [optional]  # noqa: E501
            ma_st_r_nummer (str): [optional]  # noqa: E501
            netzbetreiber_id (str): [optional]  # noqa: E501
            netzbetreiber_masked_namen (str): [optional]  # noqa: E501
            netzbetreiber_ma_st_r_nummer (str): [optional]  # noqa: E501
            netzbetreiber_namen (str): [optional]  # noqa: E501
            netzbetreiber_personen_art (str): [optional]  # noqa: E501
            ort (str): [optional]  # noqa: E501
            plz (str): [optional]  # noqa: E501
            strasse (str, none_type): [optional]  # noqa: E501
            system_status_id (int): [optional]  # noqa: E501
            system_status_name (str): [optional]  # noqa: E501
            typ (int): [optional]  # noqa: E501
            aktenzeichen_genehmigung (str, none_type): [optional]  # noqa: E501
            anzahl_solar_module (int, none_type): [optional]  # noqa: E501
            batterietechnologie (int, none_type): [optional]  # noqa: E501
            bruttoleistung (float): [optional]  # noqa: E501
            eeg_inbetriebnahme_datum (str, none_type): [optional]  # noqa: E501
            eeg_installierte_leistung (float, none_type): [optional]  # noqa: E501
            eeg_anlage_mastr_nummer (str, none_type): [optional]  # noqa: E501
            eeg_anlage_registrierungsdatum (str, none_type): [optional]  # noqa: E501
            eeg_anlagenschluessel (str, none_type): [optional]  # noqa: E501
            eeg_zuschlag (str, none_type): [optional]  # noqa: E501
            zuschlagsnummern (str): [optional]  # noqa: E501
            energietraeger_id (int): [optional]  # noqa: E501
            energietraeger_name (str): [optional]  # noqa: E501
            gemeinsamer_wechselrichter (int, none_type): [optional]  # noqa: E501
            genehmigungbehoerde (str, none_type): [optional]  # noqa: E501
            genehmigung_datum (str, none_type): [optional]  # noqa: E501
            genehmigung_registrierungsdatum (str, none_type): [optional]  # noqa: E501
            genehmigungs_mastr_nummer (str, none_type): [optional]  # noqa: E501
            gruppierungsobjekte (str): [optional]  # noqa: E501
            gruppierungsobjekte_ids (str): [optional]  # noqa: E501
            hat_flexibilitaetspraemie (bool, none_type): [optional]  # noqa: E501
            hauptausrichtung_solar_module (int, none_type): [optional]  # noqa: E501
            hauptausrichtung_solar_module_bezeichnung (str, none_type): [optional]  # noqa: E501
            hauptbrennstoff_id (int): [optional]  # noqa: E501
            hauptbrennstoff_namen (str): [optional]  # noqa: E501
            hauptneigungswinkel_solarmodule (int): [optional]  # noqa: E501
            hersteller_windenergieanlage (int, none_type): [optional]  # noqa: E501
            hersteller_windenergieanlage_bezeichnung (str, none_type): [optional]  # noqa: E501
            is_anonymisiert (bool): [optional]  # noqa: E501
            is_buergerenergie (bool, none_type): [optional]  # noqa: E501
            is_einheit_notstromaggregat (bool, none_type): [optional]  # noqa: E501
            kraftwerk_name (str, none_type): [optional]  # noqa: E501
            kraftwerk_block_name (str, none_type): [optional]  # noqa: E501
            kwk_anlage_elektrische_leistung (float): [optional]  # noqa: E501
            kwk_anlage_inbetriebnahmedatum (str): [optional]  # noqa: E501
            kwk_anlage_mastr_nummer (str): [optional]  # noqa: E501
            kwk_anlage_registrierungsdatum (str): [optional]  # noqa: E501
            kwk_zuschlag (str, none_type): [optional]  # noqa: E501
            lage_einheit (int, none_type): [optional]  # noqa: E501
            lage_einheit_bezeichnung (str, none_type): [optional]  # noqa: E501
            leistungsbegrenzung (int, none_type): [optional]  # noqa: E501
            mieterstrom_angemeldet (bool, none_type): [optional]  # noqa: E501
            nabenhoehe_windenergieanlage (float, none_type): [optional]  # noqa: E501
            nettonennleistung (float): [optional]  # noqa: E501
            pilotwindanlage (bool, none_type): [optional]  # noqa: E501
            nutzbare_speicherkapazitaet (float, none_type): [optional]  # noqa: E501
            nutzungsbereich_geb_sa (int, none_type): [optional]  # noqa: E501
            prototypanlage (bool, none_type): [optional]  # noqa: E501
            rotordurchmesser_windenergieanlage (float, none_type): [optional]  # noqa: E501
            standort_anonymisiert (str): [optional]  # noqa: E501
            spannungsebenen_namen (str): [optional]  # noqa: E501
            speicher_einheit_mastr_nummer (str, none_type): [optional]  # noqa: E501
            technologie_stromerzeugung_id (float): [optional]  # noqa: E501
            technologie_stromerzeugung (str, none_type): [optional]  # noqa: E501
            thermische_nutzleistung (float): [optional]  # noqa: E501
            typenbezeichnung (str, none_type): [optional]  # noqa: E501
            voll_teil_einspeisung (float): [optional]  # noqa: E501
            voll_teil_einspeisung_bezeichnung (str): [optional]  # noqa: E501
            wasserkraft_ertuechtigung (bool): [optional]  # noqa: E501
            wind_cluster_ostsee_id (int, none_type): [optional]  # noqa: E501
            wind_cluster_nordsee_id (int, none_type): [optional]  # noqa: E501
            windpark_name (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", True)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Entry - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (float): [optional]  # noqa: E501
            anlagenbetreiber_id (float): [optional]  # noqa: E501
            anlagenbetreiber_personen_art (float): [optional]  # noqa: E501
            anlagenbetreiber_masked_name (str): [optional]  # noqa: E501
            anlagenbetreiber_ma_st_r_nummer (str): [optional]  # noqa: E501
            anlagenbetreiber_name (str): [optional]  # noqa: E501
            betriebs_status_id (int): [optional]  # noqa: E501
            betriebs_status_name (str): [optional]  # noqa: E501
            breitengrad (float, none_type): [optional]  # noqa: E501
            bundesland_id (int): [optional]  # noqa: E501
            bundesland (str): [optional]  # noqa: E501
            datum_letzte_aktualisierung (str): [optional]  # noqa: E501
            einheit_registrierungsdatum (str): [optional]  # noqa: E501
            einheit_name (str): [optional]  # noqa: E501
            endgueltige_stilllegung_datum (str, none_type): [optional]  # noqa: E501
            flurstueck (str, none_type): [optional]  # noqa: E501
            gemarkung (str): [optional]  # noqa: E501
            gemeinde (str): [optional]  # noqa: E501
            gemeindeschluessel (str): [optional]  # noqa: E501
            geplantes_inbetriebsnahme_datum (str, none_type): [optional]  # noqa: E501
            hausnummer (str, none_type): [optional]  # noqa: E501
            inbetriebnahme_datum (str): [optional]  # noqa: E501
            is_nb_pruefung_abgeschlossen (float): [optional]  # noqa: E501
            laengengrad (float, none_type): [optional]  # noqa: E501
            land_id (int): [optional]  # noqa: E501
            landkreis (str): [optional]  # noqa: E501
            lokation_id (int): [optional]  # noqa: E501
            lokation_mastr_nr (str): [optional]  # noqa: E501
            ma_st_r_nummer (str): [optional]  # noqa: E501
            netzbetreiber_id (str): [optional]  # noqa: E501
            netzbetreiber_masked_namen (str): [optional]  # noqa: E501
            netzbetreiber_ma_st_r_nummer (str): [optional]  # noqa: E501
            netzbetreiber_namen (str): [optional]  # noqa: E501
            netzbetreiber_personen_art (str): [optional]  # noqa: E501
            ort (str): [optional]  # noqa: E501
            plz (str): [optional]  # noqa: E501
            strasse (str, none_type): [optional]  # noqa: E501
            system_status_id (int): [optional]  # noqa: E501
            system_status_name (str): [optional]  # noqa: E501
            typ (int): [optional]  # noqa: E501
            aktenzeichen_genehmigung (str, none_type): [optional]  # noqa: E501
            anzahl_solar_module (int, none_type): [optional]  # noqa: E501
            batterietechnologie (int, none_type): [optional]  # noqa: E501
            bruttoleistung (float): [optional]  # noqa: E501
            eeg_inbetriebnahme_datum (str, none_type): [optional]  # noqa: E501
            eeg_installierte_leistung (float, none_type): [optional]  # noqa: E501
            eeg_anlage_mastr_nummer (str, none_type): [optional]  # noqa: E501
            eeg_anlage_registrierungsdatum (str, none_type): [optional]  # noqa: E501
            eeg_anlagenschluessel (str, none_type): [optional]  # noqa: E501
            eeg_zuschlag (str, none_type): [optional]  # noqa: E501
            zuschlagsnummern (str): [optional]  # noqa: E501
            energietraeger_id (int): [optional]  # noqa: E501
            energietraeger_name (str): [optional]  # noqa: E501
            gemeinsamer_wechselrichter (int, none_type): [optional]  # noqa: E501
            genehmigungbehoerde (str, none_type): [optional]  # noqa: E501
            genehmigung_datum (str, none_type): [optional]  # noqa: E501
            genehmigung_registrierungsdatum (str, none_type): [optional]  # noqa: E501
            genehmigungs_mastr_nummer (str, none_type): [optional]  # noqa: E501
            gruppierungsobjekte (str): [optional]  # noqa: E501
            gruppierungsobjekte_ids (str): [optional]  # noqa: E501
            hat_flexibilitaetspraemie (bool, none_type): [optional]  # noqa: E501
            hauptausrichtung_solar_module (int, none_type): [optional]  # noqa: E501
            hauptausrichtung_solar_module_bezeichnung (str, none_type): [optional]  # noqa: E501
            hauptbrennstoff_id (int): [optional]  # noqa: E501
            hauptbrennstoff_namen (str): [optional]  # noqa: E501
            hauptneigungswinkel_solarmodule (int): [optional]  # noqa: E501
            hersteller_windenergieanlage (int, none_type): [optional]  # noqa: E501
            hersteller_windenergieanlage_bezeichnung (str, none_type): [optional]  # noqa: E501
            is_anonymisiert (bool): [optional]  # noqa: E501
            is_buergerenergie (bool, none_type): [optional]  # noqa: E501
            is_einheit_notstromaggregat (bool, none_type): [optional]  # noqa: E501
            kraftwerk_name (str, none_type): [optional]  # noqa: E501
            kraftwerk_block_name (str, none_type): [optional]  # noqa: E501
            kwk_anlage_elektrische_leistung (float): [optional]  # noqa: E501
            kwk_anlage_inbetriebnahmedatum (str): [optional]  # noqa: E501
            kwk_anlage_mastr_nummer (str): [optional]  # noqa: E501
            kwk_anlage_registrierungsdatum (str): [optional]  # noqa: E501
            kwk_zuschlag (str, none_type): [optional]  # noqa: E501
            lage_einheit (int, none_type): [optional]  # noqa: E501
            lage_einheit_bezeichnung (str, none_type): [optional]  # noqa: E501
            leistungsbegrenzung (int, none_type): [optional]  # noqa: E501
            mieterstrom_angemeldet (bool, none_type): [optional]  # noqa: E501
            nabenhoehe_windenergieanlage (float, none_type): [optional]  # noqa: E501
            nettonennleistung (float): [optional]  # noqa: E501
            pilotwindanlage (bool, none_type): [optional]  # noqa: E501
            nutzbare_speicherkapazitaet (float, none_type): [optional]  # noqa: E501
            nutzungsbereich_geb_sa (int, none_type): [optional]  # noqa: E501
            prototypanlage (bool, none_type): [optional]  # noqa: E501
            rotordurchmesser_windenergieanlage (float, none_type): [optional]  # noqa: E501
            standort_anonymisiert (str): [optional]  # noqa: E501
            spannungsebenen_namen (str): [optional]  # noqa: E501
            speicher_einheit_mastr_nummer (str, none_type): [optional]  # noqa: E501
            technologie_stromerzeugung_id (float): [optional]  # noqa: E501
            technologie_stromerzeugung (str, none_type): [optional]  # noqa: E501
            thermische_nutzleistung (float): [optional]  # noqa: E501
            typenbezeichnung (str, none_type): [optional]  # noqa: E501
            voll_teil_einspeisung (float): [optional]  # noqa: E501
            voll_teil_einspeisung_bezeichnung (str): [optional]  # noqa: E501
            wasserkraft_ertuechtigung (bool): [optional]  # noqa: E501
            wind_cluster_ostsee_id (int, none_type): [optional]  # noqa: E501
            wind_cluster_nordsee_id (int, none_type): [optional]  # noqa: E501
            windpark_name (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes."
                )
